---
import { CONTACT_INFO } from '../../utils/constants';
import { asset } from '../../utils/assets';

const pamplonaImages = [
	'img/IMG_7719-Large-1024x768.jpeg',
	'img/IMG_7699-Large-1024x768.jpeg',
	'img/IMG_7711-Large-1024x768.jpeg',
	'img/IMG_7763-Large-1024x768.jpeg',
	'img/IMG_7766-Large-1024x768.jpeg'
];

const tafallaImages = [
	'img/IMG_7725-Large-1024x768.jpeg',
	'img/IMG_7731-Large-1024x768.jpeg',
	'img/IMG_7776-Large-1024x768.jpeg',
	'img/IMG_7782-Large-1024x768.jpeg',
	'img/IMG_7801-Large-1024x768.jpeg'
];
---

<section class="clinics section" id="clinicas">
	<div class="container">
		<div class="section-header text-center">
			<h2>Nuestras Clínicas</h2>
			<p class="section-subtitle">Te esperamos en nuestros centros de Pamplona y Tafalla</p>
		</div>
		
		<div class="clinics-grid">
			<!-- Clínica Pamplona -->
			<div class="clinic-section">
				<h3 class="clinic-title">Clínica Pamplona</h3>
				<div class="clinic-card">
					<div class="carousel-container">
						<div class="carousel" data-carousel="pamplona">
							<div class="carousel-track">
								{pamplonaImages.map((img, index) => (
									<div class="carousel-slide" data-active={index === 0 ? 'true' : 'false'}>
										<img 
											src={asset(img)}
											alt={`Clínica Dental Sada Borrás en Pamplona - Imagen ${index + 1}`}
											width="600"
											height="400"
											loading="lazy"
										/>
									</div>
								))}
							</div>
							<button class="carousel-button carousel-button-prev" aria-label="Anterior">
								<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<polyline points="15 18 9 12 15 6"></polyline>
								</svg>
							</button>
							<button class="carousel-button carousel-button-next" aria-label="Siguiente">
								<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<polyline points="9 18 15 12 9 6"></polyline>
								</svg>
							</button>
						</div>
					</div>
				</div>
				<div class="carousel-indicators">
					{pamplonaImages.map((_, index) => (
						<button 
							class="indicator" 
							data-carousel="pamplona"
							data-slide={index}
							class:list={['indicator', { active: index === 0 }]}
							aria-label={`Ir a imagen ${index + 1}`}
						></button>
					))}
				</div>
			</div>
			
			<!-- Separador central -->
			<div class="clinic-separator"></div>
			
			<!-- Clínica Tafalla -->
			<div class="clinic-section">
				<h3 class="clinic-title">Clínica Tafalla</h3>
				<div class="clinic-card">
					<div class="carousel-container">
						<div class="carousel" data-carousel="tafalla">
							<div class="carousel-track">
								{tafallaImages.map((img, index) => (
									<div class="carousel-slide" data-active={index === 0 ? 'true' : 'false'}>
										<img 
											src={asset(img)}
											alt={`Clínica Dental Sada Borrás en Tafalla - Imagen ${index + 1}`}
											width="600"
											height="400"
											loading="lazy"
										/>
									</div>
								))}
							</div>
							<button class="carousel-button carousel-button-prev" aria-label="Anterior">
								<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<polyline points="15 18 9 12 15 6"></polyline>
								</svg>
							</button>
							<button class="carousel-button carousel-button-next" aria-label="Siguiente">
								<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<polyline points="9 18 15 12 9 6"></polyline>
								</svg>
							</button>
						</div>
					</div>
				</div>
				<div class="carousel-indicators">
					{tafallaImages.map((_, index) => (
						<button 
							class="indicator"
							data-carousel="tafalla"
							data-slide={index}
							class:list={['indicator', { active: index === 0 }]}
							aria-label={`Ir a imagen ${index + 1}`}
						></button>
					))}
				</div>
			</div>
		</div>
		
		<div class="clinics-cta">
			<a href={`${import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/'}instalaciones`} class="btn btn-primary">Más información</a>
		</div>
	</div>
</section>

<style>
	.clinics {
		background: #E6F7F6;
		position: relative;
		z-index: 10;
		border-bottom: 1px solid var(--color-divider);
	}
	
	.clinics .section-header h2 {
		font-size: 38px;
		color: var(--c-ink);
		font-family: var(--ff-head);
		font-weight: 700;
		line-height: 1.2;
		padding-bottom: 1rem;
		border-bottom: 3px solid var(--c-ink);
		display: inline-block;
	}
	
	.clinics-grid {
		display: grid;
		grid-template-columns: 1fr auto 1fr;
		gap: 0;
		margin-bottom: var(--spacing-lg);
		align-items: start;
	}
	
	.clinic-separator {
		width: 80px;
		height: 100%;
		min-height: 200px;
	}
	
	.clinic-section {
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
	}
	
	.clinic-title {
		font-size: 15px;
		color: var(--c-ink);
		font-weight: 700;
		font-family: var(--ff-body);
		line-height: 1.2;
		text-align: left;
		margin: 0 0 1rem 0;
		padding-left: 0.5rem;
		padding-bottom: 0.75rem;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		border-bottom: 3px solid var(--c-ink);
	}
	
	.clinic-card {
		background: white;
		border-radius: var(--border-radius-lg);
		overflow: hidden;
		box-shadow: var(--shadow-md);
		transition: var(--transition);
	}
	
	.carousel-container {
		position: relative;
		width: 100%;
		height: 400px;
		overflow: hidden;
	}
	
	.clinic-badge {
		position: absolute;
		top: 1rem;
		right: 1rem;
		background: var(--color-primary);
		color: white;
		padding: 0.5rem 1rem;
		border-radius: var(--border-radius);
		font-weight: 600;
		font-size: var(--font-size-sm);
		z-index: 10;
	}
	
	.carousel {
		position: relative;
		width: 100%;
		height: 100%;
	}
	
	.carousel-track {
		position: relative;
		width: 100%;
		height: 100%;
		display: flex;
		overflow-x: auto;
		scroll-snap-type: x mandatory;
		scroll-behavior: smooth;
		scrollbar-width: none;
		-ms-overflow-style: none;
	}
	
	.carousel-track::-webkit-scrollbar {
		display: none;
	}
	
	.carousel-slide {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		opacity: 0;
		transition: opacity 0.5s ease-in-out;
		pointer-events: none;
	}
	
	.carousel-slide[data-active="true"] {
		opacity: 1;
		pointer-events: auto;
	}
	
	.carousel-slide img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		user-select: none;
	}
	
	.carousel-button {
		position: absolute;
		top: 50%;
		transform: translateY(-50%);
		background: rgba(255, 255, 255, 0.9);
		border: none;
		width: 48px;
		height: 48px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		z-index: 10;
		transition: var(--transition);
		box-shadow: var(--shadow-sm);
	}
	
	.carousel-button:hover {
		background: white;
		box-shadow: var(--shadow-md);
		transform: translateY(-50%) scale(1.1);
	}
	
	.carousel-button svg {
		color: var(--color-secondary);
	}
	
	.carousel-button-prev {
		left: 1rem;
	}
	
	.carousel-button-next {
		right: 1rem;
	}
	
	.carousel-indicators {
		display: flex;
		justify-content: center;
		gap: 12px;
		margin-top: 1rem;
	}
	
	.indicator {
		width: 8px;
		height: 8px;
		border-radius: 50%;
		border: none;
		background: rgba(0, 0, 0, 0.3);
		cursor: pointer;
		transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
		position: relative;
		padding: 0;
	}
	
	.indicator::before {
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: transparent;
		transition: background 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	
	.indicator:hover::before {
		background: rgba(0, 0, 0, 0.1);
	}
	
	.indicator.active {
		background: var(--color-primary);
		transform: scale(1.2);
	}
	
	.indicator.active::before {
		background: rgba(0, 191, 166, 0.2);
	}
	
	.clinics-cta {
		margin-top: var(--spacing-md);
		text-align: left;
		padding-left: 0.5rem;
	}
	
	.btn {
		padding: 1rem 2rem;
		border-radius: var(--border-radius);
		font-weight: 600;
		font-size: var(--font-size-base);
		transition: var(--transition);
		display: inline-block;
		text-align: center;
		text-decoration: none;
		border: none;
		cursor: pointer;
	}
	
	.btn-primary {
		background: var(--color-primary);
		color: white;
	}
	
	.btn-primary:hover {
		background: var(--color-primary-dark);
		transform: translateY(-2px);
		box-shadow: var(--shadow-md);
	}
	
	@media (max-width: 767px) {
		.clinics-grid {
			grid-template-columns: 1fr;
			gap: var(--spacing-lg);
		}
		
		.clinic-separator {
			display: none;
		}
		
		.clinic-section {
			gap: 1.5rem;
		}
		
		.carousel-container {
			height: 300px;
		}
		
		.carousel-button {
			width: 40px;
			height: 40px;
		}
		
		.carousel-button-prev {
			left: 0.5rem;
		}
		
		.carousel-button-next {
			right: 0.5rem;
		}
		
		.indicator {
			width: 10px;
			height: 10px;
		}
		
		.indicator::before {
			width: 24px;
			height: 24px;
		}
	}
</style>

<script>
	let currentSlideIndex = 0;
	let autoplayInterval: number;
	
	function initCarousels() {
		const clinicSections = document.querySelectorAll('.clinic-section');
		
		clinicSections.forEach(section => {
			const carousel = section.querySelector('.carousel');
			if (!carousel) return;
			
			const carouselName = carousel.getAttribute('data-carousel');
			const slides = carousel.querySelectorAll('.carousel-slide');
			const indicators = section.querySelectorAll('.indicator');
			const prevButton = carousel.querySelector('.carousel-button-prev');
			const nextButton = carousel.querySelector('.carousel-button-next');
			const track = carousel.querySelector('.carousel-track');
			
			if (!slides.length) return;
			
			let localCurrentSlide = 0;
			
			function goToSlide(index: number) {
				localCurrentSlide = (index + slides.length) % slides.length;
				
				slides.forEach((slide, i) => {
					slide.setAttribute('data-active', i === localCurrentSlide ? 'true' : 'false');
				});
				
				indicators.forEach((indicator, i) => {
					if (i === localCurrentSlide) {
						indicator.classList.add('active');
					} else {
						indicator.classList.remove('active');
					}
				});
			}
			
			function nextSlide() {
				goToSlide(localCurrentSlide + 1);
			}
			
			function prevSlide() {
				goToSlide(localCurrentSlide - 1);
			}
			
			prevButton?.addEventListener('click', () => {
				prevSlide();
				resetAutoplay();
			});
			
			nextButton?.addEventListener('click', () => {
				nextSlide();
				resetAutoplay();
			});
			
			indicators.forEach((indicator, index) => {
				indicator.addEventListener('click', () => {
					goToSlide(index);
					resetAutoplay();
				});
			});
			
			// Touch/swipe support
			let touchStartX = 0;
			let touchEndX = 0;
			
			track?.addEventListener('touchstart', (e) => {
				const touchEvent = e as TouchEvent;
				touchStartX = touchEvent.touches[0].clientX;
			}, { passive: true });
			
			track?.addEventListener('touchmove', (e) => {
				const touchEvent = e as TouchEvent;
				touchEndX = touchEvent.touches[0].clientX;
			}, { passive: true });
			
			track?.addEventListener('touchend', () => {
				const swipeThreshold = 50;
				const diff = touchStartX - touchEndX;
				
				if (Math.abs(diff) > swipeThreshold) {
					if (diff > 0) {
						nextSlide();
					} else {
						prevSlide();
					}
					resetAutoplay();
				}
			});
			
			// Mouse drag support for desktop
			let mouseStartX = 0;
			let mouseEndX = 0;
			let isDragging = false;
			
			track?.addEventListener('mousedown', (e) => {
				const mouseEvent = e as MouseEvent;
				isDragging = true;
				mouseStartX = mouseEvent.clientX;
				if (track instanceof HTMLElement) {
					track.style.cursor = 'grabbing';
				}
			});
			
			track?.addEventListener('mousemove', (e) => {
				if (!isDragging) return;
				const mouseEvent = e as MouseEvent;
				mouseEndX = mouseEvent.clientX;
			});
			
			track?.addEventListener('mouseup', () => {
				if (!isDragging) return;
				isDragging = false;
				if (track instanceof HTMLElement) {
					track.style.cursor = 'grab';
				}
				
				const swipeThreshold = 50;
				const diff = mouseStartX - mouseEndX;
				
				if (Math.abs(diff) > swipeThreshold) {
					if (diff > 0) {
						nextSlide();
					} else {
						prevSlide();
					}
					resetAutoplay();
				}
			});
			
			track?.addEventListener('mouseleave', () => {
				if (isDragging && track instanceof HTMLElement) {
					isDragging = false;
					track.style.cursor = 'grab';
				}
			});
			
			if (track instanceof HTMLElement) {
				track.style.cursor = 'grab';
			}
		});
		
		// Sincronizar autoplay cada 3 segundos
		startAutoplay();
	}
	
	function startAutoplay() {
		autoplayInterval = window.setInterval(() => {
			const clinicSections = document.querySelectorAll('.clinic-section');
			clinicSections.forEach(section => {
				const carousel = section.querySelector('.carousel');
				if (!carousel) return;
				
				const slides = carousel.querySelectorAll('.carousel-slide');
				const indicators = section.querySelectorAll('.indicator');
				
				let currentActive = 0;
				slides.forEach((slide, i) => {
					if (slide.getAttribute('data-active') === 'true') {
						currentActive = i;
					}
				});
				
				const nextSlide = (currentActive + 1) % slides.length;
				
				slides.forEach((slide, i) => {
					slide.setAttribute('data-active', i === nextSlide ? 'true' : 'false');
				});
				
				indicators.forEach((indicator, i) => {
					if (i === nextSlide) {
						indicator.classList.add('active');
					} else {
						indicator.classList.remove('active');
					}
				});
			});
		}, 3000);
	}
	
	function resetAutoplay() {
		clearInterval(autoplayInterval);
		startAutoplay();
	}
	
	// Inicializar cuando el DOM esté listo
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initCarousels);
	} else {
		initCarousels();
	}
</script>
