---
import type { ReviewsData } from '../../types/reviews';
import { loadReviews, getInitials } from '../../lib/reviews';
import { asset } from '../../utils/assets';

// Cargar datos de reseñas
const reviewsData: ReviewsData = await loadReviews();

// Calcular rating promedio y total de reseñas de todas las clínicas
const totalRating = reviewsData.places.reduce((sum, place) => sum + (place.rating * place.userRatingCount), 0);
const totalCount = reviewsData.places.reduce((sum, place) => sum + place.userRatingCount, 0);
const averageRating = totalCount > 0 ? (totalRating / totalCount) : 0;

// Obtener el primer lugar para el writeReviewUri
const primaryPlace = reviewsData.places[0];

// Combinar todas las reseñas de todos los lugares, filtrar y ordenar
// Criterios: 1) Solo reseñas con texto, 2) Rating mínimo de 3★, 3) Ordenar por rating (5★ primero), 4) Dentro de cada rating, ordenar por fecha (más nuevas primero)
const allReviews = reviewsData.places
	.flatMap(place => place.reviews.map(review => ({ ...review, placeName: place.name })))
	.filter(review => review.text && review.text.trim().length > 0 && review.rating >= 3)
	.sort((a, b) => {
		// Primero ordenar por rating (de mayor a menor)
		if (b.rating !== a.rating) {
			return b.rating - a.rating;
		}
		// Si tienen el mismo rating, ordenar por fecha (más recientes primero)
		return new Date(b.time).getTime() - new Date(a.time).getTime();
	});

// Función para formatear fecha como YYYY-MM-DD
function formatDate(dateStr: string): string {
	const date = new Date(dateStr);
	const year = date.getFullYear();
	const month = String(date.getMonth() + 1).padStart(2, '0');
	const day = String(date.getDate()).padStart(2, '0');
	return `${year}-${month}-${day}`;
}
---

<section class="google-reviews section" aria-labelledby="reviews-heading">
	<div class="container">
		<div class="reviews-grid">
			<!-- Panel izquierdo: Resumen de la clínica -->
			<div class="reviews-summary">
				<div class="clinic-header">
					<div class="clinic-logo">
						<img 
							src={asset("/icons/logo-dental-2.png")}
							alt="Logo Clínica Dental Sada Borrás" 
							width="60" 
							height="60"
							loading="lazy"
						/>
					</div>
					<h3 id="reviews-heading" class="clinic-name">Clínica Dental Sada Borrás</h3>
				</div>
				
				<div class="rating-display">
					<div class="stars-large">
						{"★".repeat(Math.floor(averageRating))}{"☆".repeat(5 - Math.floor(averageRating))}
					</div>
					<span class="rating-number">{averageRating.toFixed(1)}</span>
				</div>
				
				<p class="review-count">{totalCount} reseñas Google</p>
				
				{primaryPlace && primaryPlace.writeReviewUri && (
					<a 
						href={primaryPlace.writeReviewUri}
						target="_blank"
						rel="noopener noreferrer"
						class="write-review-btn"
					>
						Escribe una reseña
					</a>
				)}
			</div>
			
			<!-- Panel derecho: Carrusel de reseñas -->
			<div class="reviews-carousel-wrapper">
				{allReviews.length > 0 ? (
					<>
						<button class="carousel-btn prev" id="reviews-prev" aria-label="Reseñas anteriores">
							<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<polyline points="15,18 9,12 15,6"></polyline>
							</svg>
						</button>
						
						<div class="reviews-list" id="reviews-list">
							{allReviews.slice(0, 10).map((review, index) => (
								<article class="review-card" data-review-id={index}>
									<div class="review-header">
										<div class="author-avatar">
											{getInitials(review.author)}
										</div>
										<div class="author-info">
											<h4 class="author-name">{review.author}</h4>
											<time class="review-date" datetime={review.time}>
												{formatDate(review.time)}
											</time>
										</div>
										<svg class="google-icon" width="24" height="24" viewBox="0 0 24 24">
											<path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
											<path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
											<path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
											<path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
										</svg>
									</div>
									
								<div class="review-rating">
									<div class="stars">
										{"★".repeat(review.rating)}
									</div>
									<img 
										src={asset("/icons/google-verified-1.svg")}
										alt="Verificado por Google"
										class="verified-icon"
										width="16"
										height="16"
									/>
								</div>
									
									{review.text && (
										<div class="review-text-wrapper">
											<p class="review-text">{review.text}</p>
											{review.text.length > 200 && (
												<button class="review-toggle-btn" data-action="expand">
													Leer más
												</button>
											)}
										</div>
									)}
								</article>
							))}
						</div>
						
						<button class="carousel-btn next" id="reviews-next" aria-label="Siguientes reseñas">
							<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<polyline points="9,18 15,12 9,6"></polyline>
							</svg>
						</button>
					</>
				) : (
					<div class="no-reviews">
						<p>No hay reseñas disponibles</p>
					</div>
				)}
			</div>
		</div>
		
	</div>
</section>

<style>
	.google-reviews {
		background: white;
		padding: var(--spacing-xl) 0;
		position: relative;
		z-index: 1;
		border-bottom: 1px solid var(--color-divider);
	}

	.reviews-grid {
		display: grid;
		grid-template-columns: 280px minmax(0, 1fr);
		gap: 1.5rem;
		align-items: stretch;
	}

	/* Panel Izquierdo */
	.reviews-summary {
		background: transparent;
		padding: 1.5rem;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		height: 280px;
	}

	.clinic-header {
		display: flex;
		align-items: center;
		gap: 1rem;
		margin-bottom: 0.75rem;
	}

	.clinic-logo {
		flex-shrink: 0;
	}

	.clinic-logo img {
		width: 60px;
		height: 60px;
		object-fit: contain;
	}

	.clinic-name {
		font-size: 16px;
		font-weight: 500;
		color: #202124;
		line-height: 1.3;
		text-align: left;
		margin: 0;
		font-family: 'Google Sans', 'Roboto', var(--ff-body);
	}

	.rating-display {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.5rem;
		margin-bottom: 0.5rem;
	}

	.stars-large {
		color: #FFB400;
		font-size: 1.25rem;
		letter-spacing: 2px;
	}

	.rating-number {
		font-size: 1.5rem;
		font-weight: 400;
		color: #202124;
		font-family: 'Google Sans', 'Roboto', var(--ff-body);
	}

	.review-count {
		color: #5f6368;
		font-size: 14px;
		text-align: center;
		margin-bottom: auto;
		font-family: 'Roboto', var(--ff-body);
		font-weight: 400;
	}

	.write-review-btn {
		display: inline-block;
		width: auto;
		background: var(--c-primary);
		border: 2px solid var(--c-primary);
		color: white;
		padding: 0.625rem 1.25rem;
		border-radius: var(--rad);
		font-weight: 600;
		text-decoration: none;
		transition: var(--transition);
		font-size: 14px;
		text-align: center;
		margin-top: auto;
		font-family: var(--ff-body);
		white-space: nowrap;
	}

	.write-review-btn:hover {
		background: white;
		color: var(--c-primary);
		border: 2px solid var(--c-primary);
		transform: translateY(-1px);
	}

	/* Panel Derecho - Carrusel de Reseñas */
	.reviews-carousel-wrapper {
		position: relative;
		padding: 0 60px;
		overflow: visible;
		min-width: 0;
		width: calc(100% + 157px);
		margin-left: 0;
		min-height: 280px;
	}

	.carousel-btn {
		position: absolute;
		top: 50%;
		transform: translateY(-50%);
		background: white;
		border: 1px solid #dadce0;
		border-radius: 50%;
		width: 44px;
		height: 44px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		transition: all 0.2s ease;
		z-index: 100;
		box-shadow: 0 2px 8px rgba(0,0,0,0.15);
	}

	.carousel-btn:hover:not(:disabled) {
		background: #f8f9fa;
		box-shadow: 0 4px 16px rgba(0,0,0,0.2);
		transform: translateY(-50%) scale(1.05);
	}

	.carousel-btn.prev {
		left: 0;
	}

	.carousel-btn.next {
		right: 0;
	}

	.carousel-btn:disabled {
		cursor: not-allowed;
		pointer-events: none;
		background: white;
	}

	.carousel-btn:disabled svg {
		color: #d1d5db;
	}

	.reviews-list {
		display: flex;
		gap: 1rem;
		overflow-x: auto;
		overflow-y: visible;
		scroll-behavior: smooth;
		scrollbar-width: none;
		-ms-overflow-style: none;
		align-items: flex-start;
	}
	
	.reviews-list::-webkit-scrollbar {
		display: none;
	}

	.review-card {
		background: white;
		border-radius: 8px;
		padding: 1.5rem;
		width: 280px;
		min-width: 280px;
		height: 280px;
		flex-shrink: 0;
		box-shadow: 0 1px 3px rgba(0,0,0,0.1);
		border: 1px solid #e8eaed;
		transition: height 0.4s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.3s ease;
		display: flex;
		flex-direction: column;
		overflow: hidden;
	}
	
	.review-card.expanded {
		height: auto;
		max-height: 800px;
		overflow: visible;
	}

	.review-card:hover {
		box-shadow: 0 4px 12px rgba(0,0,0,0.15);
	}

	.review-header {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		margin-bottom: 0.75rem;
	}

	.author-avatar {
		width: 40px;
		height: 40px;
		border-radius: 50%;
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		font-weight: 600;
		font-size: 1rem;
		flex-shrink: 0;
	}

	.author-info {
		flex: 1;
	}

	.author-name {
		font-size: 14px;
		font-weight: 500;
		color: #3c4043;
		margin-bottom: 0.25rem;
		font-family: 'Google Sans', 'Roboto', var(--ff-body);
	}

	.review-date {
		font-size: 12px;
		color: #70757a;
		font-family: 'Roboto', var(--ff-body);
		font-weight: 400;
	}

	.google-icon {
		flex-shrink: 0;
	}

	.review-rating {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		margin-bottom: 0.75rem;
	}

	.stars {
		color: #FFB400;
		font-size: 1.1rem;
		letter-spacing: 1px;
	}

	.verified-icon {
		flex-shrink: 0;
	}

	.review-text-wrapper {
		flex: 1;
		display: flex;
		flex-direction: column;
		min-height: 0;
	}
	
	.review-text {
		color: #3c4043;
		font-size: 14px;
		line-height: 1.5;
		margin: 0 0 0.75rem 0;
		overflow: hidden;
		display: -webkit-box;
		-webkit-line-clamp: 5;
		-webkit-box-orient: vertical;
		font-family: 'Roboto', var(--ff-body);
		font-weight: 400;
		word-wrap: break-word;
	}
	
	.review-text.expanded {
		display: block;
		-webkit-line-clamp: unset;
		-webkit-box-orient: unset;
		overflow: visible;
		margin-bottom: 0.75rem;
		text-overflow: clip;
	}
	
	.review-toggle-btn {
		background: none;
		border: none;
		color: #1a73e8;
		font-size: 13px;
		font-family: 'Roboto', var(--ff-body);
		font-weight: 500;
		cursor: pointer;
		padding: 0;
		text-align: left;
		transition: color 0.2s ease;
		margin-top: auto;
		flex-shrink: 0;
	}
	
	.review-toggle-btn:hover {
		text-decoration: underline;
	}

	.no-reviews {
		padding: 2rem;
		text-align: center;
		color: var(--color-text-light);
	}

	.reviews-attribution {
		margin-top: 2rem;
		text-align: center;
		color: var(--color-text-light);
		font-size: var(--font-size-xs);
	}

	.reviews-attribution p {
		margin: 0;
	}

	@media (max-width: 1024px) {
		.reviews-grid {
			grid-template-columns: 1fr;
			gap: 1.5rem;
		}

		.reviews-summary {
			height: auto;
			padding: 2rem 1.5rem;
			text-align: center;
			margin-bottom: 1rem;
			display: flex;
			flex-direction: column;
			align-items: center;
		}

		.clinic-header {
			justify-content: center;
			margin-bottom: 1.25rem;
		}

		.rating-display {
			margin-bottom: 0.75rem;
		}

		.review-count {
			margin-bottom: 1.25rem;
		}

		.write-review-btn {
			width: auto;
		}

		.reviews-carousel-wrapper {
			width: 100%;
			margin-left: 0;
			padding: 0 50px;
			overflow: hidden;
			min-height: 300px;
		}

		.carousel-btn {
			display: flex;
		}

		.reviews-list {
			display: flex;
			gap: 1rem;
			transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
			will-change: transform;
			overflow: visible;
		}

		.review-card {
			flex: 0 0 100%;
			min-width: 100%;
			width: 100%;
			max-width: 450px;
			height: 280px;
		}

		.review-card.expanded {
			height: auto;
		}
	}

	@media (max-width: 768px) {
		.google-reviews {
			padding: var(--spacing-md) 0;
		}

		.reviews-summary {
			padding: 1.5rem 1rem;
			height: auto;
			gap: 1rem;
			margin-bottom: 1.5rem;
			display: flex;
			flex-direction: column;
			align-items: center;
		}

		.clinic-header {
			margin-bottom: 1rem;
			justify-content: center;
		}

		.clinic-logo img {
			width: 50px;
			height: 50px;
		}

		.clinic-name {
			font-size: 15px;
		}

		.rating-display {
			flex-direction: row;
			gap: 0.75rem;
			margin-bottom: 0.5rem;
		}

		.stars-large {
			font-size: 1.1rem;
		}

		.rating-number {
			font-size: 1.75rem;
		}

		.review-count {
			margin-bottom: 1rem;
			font-size: 13px;
		}

		.write-review-btn {
			padding: 0.625rem 1.25rem;
			font-size: 13px;
			margin-top: 0;
			width: auto;
		}

		.review-card {
			flex: 0 0 100%;
			min-width: 100%;
			width: 100%;
			height: 280px;
			padding: 1.25rem;
			max-width: none;
		}

		.review-card.expanded {
			height: auto;
		}

		.reviews-carousel-wrapper {
			padding: 0 45px;
		}

		.carousel-btn {
			width: 40px;
			height: 40px;
		}

		.carousel-btn.prev {
			left: 0;
		}

		.carousel-btn.next {
			right: 0;
		}
	}
</style>

<script>
	class ReviewsCarousel {
		container: HTMLElement | null;
		prevBtn: HTMLButtonElement | null;
		nextBtn: HTMLButtonElement | null;
		scrollAmount: number;
		isMobile: boolean;
		currentIndex: number;
		cards: NodeListOf<HTMLElement> | null;
		touchStartX: number;
		touchEndX: number;

		constructor() {
			this.container = document.getElementById('reviews-list');
			this.prevBtn = document.getElementById('reviews-prev') as HTMLButtonElement;
			this.nextBtn = document.getElementById('reviews-next') as HTMLButtonElement;
			this.scrollAmount = 340; // Ancho de tarjeta (320px) + gap (20px)
			this.isMobile = window.innerWidth <= 1024;
			this.currentIndex = 0;
			this.cards = null;
			this.touchStartX = 0;
			this.touchEndX = 0;

			this.init();
		}

		init() {
			if (!this.container || !this.prevBtn || !this.nextBtn) return;

			this.cards = this.container.querySelectorAll('.review-card');

			if (this.isMobile) {
				this.initMobile();
			} else {
				this.initDesktop();
			}

			// Detectar cambios de tamaño de pantalla
			window.addEventListener('resize', () => {
				const wasMobile = this.isMobile;
				this.isMobile = window.innerWidth <= 1024;
				
				if (wasMobile !== this.isMobile) {
					this.cleanup();
					if (this.isMobile) {
						this.initMobile();
					} else {
						this.initDesktop();
					}
				}
			});
		}

		initDesktop() {
			if (!this.container) return;

			this.prevBtn?.addEventListener('click', () => this.scrollDesktop('left'));
			this.nextBtn?.addEventListener('click', () => this.scrollDesktop('right'));

			// Actualizar estado de botones al hacer scroll
			this.container.addEventListener('scroll', () => this.updateDesktopButtons());
			this.updateDesktopButtons();
		}

		initMobile() {
			if (!this.cards || !this.container) return;

			// Resetear posición inicial
			this.container.style.transform = 'translateX(0)';

			this.prevBtn?.addEventListener('click', () => this.navigateMobile('prev'));
			this.nextBtn?.addEventListener('click', () => this.navigateMobile('next'));

			// Soporte para swipe
			this.container.addEventListener('touchstart', (e) => {
				this.touchStartX = e.touches[0].clientX;
			});

			this.container.addEventListener('touchend', (e) => {
				this.touchEndX = e.changedTouches[0].clientX;
				this.handleSwipe();
			});

			this.updateMobileButtons();
		}

		scrollDesktop(direction: 'left' | 'right') {
			if (!this.container) return;

			// Obtener el ancho de una tarjeta + gap
			const card = this.container.querySelector('.review-card') as HTMLElement;
			if (!card) return;

			const cardWidth = card.offsetWidth;
			const gap = 16; // 1rem
			const scrollAmount = cardWidth + gap;

			const scrollLeft = direction === 'left' 
				? this.container.scrollLeft - scrollAmount
				: this.container.scrollLeft + scrollAmount;

			this.container.scrollTo({
				left: scrollLeft,
				behavior: 'smooth'
			});
		}

		navigateMobile(direction: 'prev' | 'next') {
			if (!this.cards || !this.container) return;

			if (direction === 'next' && this.currentIndex < this.cards.length - 1) {
				this.currentIndex++;
			} else if (direction === 'prev' && this.currentIndex > 0) {
				this.currentIndex--;
			}

			// Calcular desplazamiento
			// En móvil cada tarjeta ocupa el 100% del wrapper visible
			const wrapper = this.container.parentElement;
			if (!wrapper) return;
			
			// El wrapper tiene padding, así que usamos el ancho interno
			const wrapperPadding = parseInt(getComputedStyle(wrapper).paddingLeft || '0') + parseInt(getComputedStyle(wrapper).paddingRight || '0');
			const availableWidth = wrapper.offsetWidth - wrapperPadding;
			const gap = 16; // 1rem en px
			const displacement = this.currentIndex * (availableWidth + gap);
			
			this.container.style.transform = `translateX(-${displacement}px)`;
			this.updateMobileButtons();
		}

		handleSwipe() {
			const swipeThreshold = 50; // 50px mínimo para detectar swipe
			const diff = this.touchStartX - this.touchEndX;

			if (Math.abs(diff) > swipeThreshold) {
				if (diff > 0) {
					// Swipe hacia la izquierda = siguiente
					this.navigateMobile('next');
				} else {
					// Swipe hacia la derecha = anterior
					this.navigateMobile('prev');
				}
			}
		}

		updateDesktopButtons() {
			if (!this.container || !this.prevBtn || !this.nextBtn) return;

			const isAtStart = this.container.scrollLeft <= 0;
			const isAtEnd = this.container.scrollLeft >= this.container.scrollWidth - this.container.clientWidth - 10;

			this.prevBtn.disabled = isAtStart;
			this.nextBtn.disabled = isAtEnd;
		}

		updateMobileButtons() {
			if (!this.cards || !this.prevBtn || !this.nextBtn) return;

			this.prevBtn.disabled = this.currentIndex === 0;
			this.nextBtn.disabled = this.currentIndex === this.cards.length - 1;
		}

		cleanup() {
			// Reset index
			this.currentIndex = 0;
			
			// Remover event listeners antiguos
			if (this.prevBtn) {
				this.prevBtn.replaceWith(this.prevBtn.cloneNode(true));
				this.prevBtn = document.getElementById('reviews-prev') as HTMLButtonElement;
			}
			if (this.nextBtn) {
				this.nextBtn.replaceWith(this.nextBtn.cloneNode(true));
				this.nextBtn = document.getElementById('reviews-next') as HTMLButtonElement;
			}
			if (this.container) {
				const newContainer = this.container.cloneNode(true) as HTMLElement;
				this.container.replaceWith(newContainer);
				this.container = document.getElementById('reviews-list');
				this.cards = this.container?.querySelectorAll('.review-card') || null;
			}
		}
	}

	class ReviewTextExpander {
		constructor() {
			this.init();
		}
		
		init() {
			const toggleButtons = document.querySelectorAll('.review-toggle-btn');
			
			console.log('ReviewTextExpander: Botones encontrados:', toggleButtons.length);
			
			toggleButtons.forEach((btn) => {
				btn.addEventListener('click', (e) => {
					e.stopPropagation();
					
					const button = btn as HTMLButtonElement;
					const card = button.closest('.review-card') as HTMLElement;
					const textElement = card?.querySelector('.review-text') as HTMLElement;
					
					if (!textElement || !card) {
						console.log('ReviewTextExpander: No se encontró textElement o card');
						return;
					}
					
					const action = button.getAttribute('data-action');
					
					if (action === 'expand') {
						// Expandir
						const fullHeight = textElement.scrollHeight + 200; // altura del texto + espacio para header/rating/button
						card.style.height = fullHeight + 'px';
						textElement.classList.add('expanded');
						card.classList.add('expanded');
						button.setAttribute('data-action', 'collapse');
						button.textContent = 'Ocultar';
					} else {
						// Colapsar
						card.style.height = '280px';
						textElement.classList.remove('expanded');
						card.classList.remove('expanded');
						button.setAttribute('data-action', 'expand');
						button.textContent = 'Leer más';
					}
				});
			});
		}
	}
	
	// Inicializar carrusel y expansor
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			new ReviewsCarousel();
			new ReviewTextExpander();
		});
	} else {
		new ReviewsCarousel();
		new ReviewTextExpander();
	}
</script>
